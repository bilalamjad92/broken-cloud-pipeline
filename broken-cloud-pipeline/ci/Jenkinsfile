pipeline {
    agent any
    parameters {
        booleanParam(name: 'UPDATE_JENKINS', defaultValue: false, description: 'Set to true to update Jenkins service')
    }
    environment {
        AWS_REGION = 'eu-central-1'
        ECR_REGISTRY = '216989105561.dkr.ecr.eu-central-1.amazonaws.com'
        GIT_REPO = 'https://github.com/bilalamjad92/broken-cloud-pipeline.git'
        SNS_TOPIC = 'arn:aws:sns:eu-central-1:216989105561:pipeline-notifications'
        ECS_CLUSTER = 'app-cluster'
    }
    stages {
        stage('Checkout') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'github-cred-id', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASS')]) {
                    git url: "${GIT_REPO}", branch: 'main', credentialsId: 'github-cred-id'
                }
            }
        }
        stage('Build and Deploy Hello-World') {
            environment {
                ECR_REPO = 'infrastructureascode/hello-world'
                IMAGE_TAG = "${env.BUILD_NUMBER}-hello-world"
                ECS_SERVICE = 'app-service'
            }
            steps {
                // Updated path to ci/app for the hello-world Dockerfile
                sh 'docker build -t ${ECR_REGISTRY}/${ECR_REPO}:${IMAGE_TAG} ci/app'
                
                withAWS(credentials: 'aws-cred-id', region: "${AWS_REGION}") {
                    script {
                        sh 'aws ecr get-login-password --region ${AWS_REGION} | docker login --username AWS --password-stdin ${ECR_REGISTRY}'
                        sh 'docker push ${ECR_REGISTRY}/${ECR_REPO}:${IMAGE_TAG}'
                        def taskDef = """
                        {
                            "family": "app-task",
                            "networkMode": "bridge",
                            "containerDefinitions": [{
                                "name": "hello-world",
                                "image": "${ECR_REGISTRY}/${ECR_REPO}:${IMAGE_TAG}",
                                "cpu": 256,
                                "memory": 512,
                                "portMappings": [{"containerPort": 8080, "hostPort": 0, "protocol": "tcp"}],
                                "logConfiguration": {
                                    "logDriver": "awslogs",
                                    "options": {
                                        "awslogs-group": "/ecs/app-task",
                                        "awslogs-region": "eu-central-1",
                                        "awslogs-stream-prefix": "ecs"
                                    }
                                }
                            }]
                        }
                        """
                        writeFile file: 'app-task.json', text: taskDef
                        def taskDefArn = sh(script: 'aws ecs register-task-definition --cli-input-json file://app-task.json --query "taskDefinition.taskDefinitionArn" --output text', returnStdout: true).trim()
                        sh 'aws ecs update-service --cluster ${ECS_CLUSTER} --service ${ECS_SERVICE} --task-definition ${taskDefArn} --region ${AWS_REGION}'
                    }
                }
            }
        }
        stage('Update Jenkins') {
            when {
                expression { params.UPDATE_JENKINS }
            }
            environment {
                ECR_REPO = 'jenkins'
                IMAGE_TAG = "${env.BUILD_NUMBER}-jenkins"
                ECS_SERVICE = 'jenkins-service'
            }
            steps {
                // No change here as the Jenkins Dockerfile location wasnâ€™t specified
                sh 'docker build -t ${ECR_REGISTRY}/${ECR_REPO}:${IMAGE_TAG} ../jenkins'
                
                withAWS(credentials: 'aws-cred-id', region: "${AWS_REGION}") {
                    script {
                        sh 'aws ecr get-login-password --region ${AWS_REGION} | docker login --username AWS --password-stdin ${ECR_REGISTRY}'
                        sh 'docker push ${ECR_REGISTRY}/${ECR_REPO}:${IMAGE_TAG}'
                        def taskDef = """
                        {
                            "family": "jenkins-task",
                            "networkMode": "bridge",
                            "containerDefinitions": [{
                                "name": "jenkins",
                                "image": "${ECR_REGISTRY}/${ECR_REPO}:${IMAGE_TAG}",
                                "cpu": 512,
                                "memory": 1024,
                                "portMappings": [{"containerPort": 8080, "hostPort": 0, "protocol": "tcp"}],
                                "logConfiguration": {
                                    "logDriver": "awslogs",
                                    "options": {
                                        "awslogs-group": "/ecs/jenkins-task",
                                        "awslogs-region": "eu-central-1",
                                        "awslogs-stream-prefix": "ecs"
                                    }
                                }
                            }]
                        }
                        """
                        writeFile file: 'jenkins-task.json', text: taskDef
                        def taskDefArn = sh(script: 'aws ecs register-task-definition --cli-input-json file://jenkins-task.json --query "taskDefinition.taskDefinitionArn" --output text', returnStdout: true).trim()
                        sh 'aws ecs update-service --cluster ${ECS_CLUSTER} --service ${ECS_SERVICE} --task-definition ${taskDefArn} --region ${AWS_REGION}'
                    }
                }
            }
        }
    }
    post {
        always {
            withAWS(credentials: 'aws-cred-id', region: "${AWS_REGION}") {
                script {
                    def status = currentBuild.currentResult
                    sh "aws sns publish --topic-arn ${SNS_TOPIC} --message 'Pipeline ${status} - Build #${BUILD_NUMBER}'"
                }
            }
        }
    }
}
