pipeline {
    agent any
    
    environment {
        GIT_PASS = credentials('github-cred-id')
        AWS_REGION = 'eu-central-1'
    }
    
    stages {
        stage('Checkout') {
            steps {
                withCredentials([string(credentialsId: 'github-cred-id', variable: 'GIT_PASS')]) {
                    git url: 'https://github.com/bilalamjad92/broken-cloud-pipeline.git',
                        credentialsId: 'github-cred-id',
                        branch: 'main'
                }
                
                dir('ci') {
                    sh '''
                        if [ ! -d ci ]; then
                            echo "ci directory found successfully!"
                        else
                            echo "Proceeding with CI directory"
                        fi
                    '''
                }
            }
        }
        
        stage('Build and Deploy Application') {
            steps {
                dir('ci/app') {
                    sh 'docker build -t cloud-app:latest .'
                    sh 'docker run -d -p 8080:80 --name cloud-app cloud-app:latest'
                }
            }
        }
        
        stage('Update Jenkins Container') {
            steps {
                dir('ci/jenkins') {
                    sh 'chmod +x verify_health.sh'
                    sh './verify_health.sh'
                }
            }
        }
    }
    
    post {
        always {
            withAWS(region: env.AWS_REGION) {
                script {
                    def message = currentBuild.result == 'SUCCESS' ? 'Pipeline SUCCESS' : 'Pipeline FAILURE'
                    sh "aws sns publish --topic-arn arn:aws:sns:eu-central-1:216989105561:pipeline-notifications --message '${message} - Build #${BUILD_NUMBER}'"
                }
            }
        }
    }
}
