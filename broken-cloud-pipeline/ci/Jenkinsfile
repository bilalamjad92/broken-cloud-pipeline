pipeline {
    agent any
    environment {
        AWS_REGION = 'eu-central-1'
        ECR_REGISTRY = '216989105561.dkr.ecr.eu-central-1.amazonaws.com'
        ECR_REPO = 'infrastructureascode/hello-world'
        IMAGE_TAG = "${env.BUILD_NUMBER}"
        ECS_CLUSTER = 'app-cluster'
        ECS_SERVICE = 'app-service'
        SNS_TOPIC = 'arn:aws:sns:eu-central-1:216989105561:pipeline-notifications'
        GIT_REPO = 'https://github.com/bilalamjad92/broken-cloud-pipeline.git'
    }
    stages {
        stage('Checkout') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'github-cred-id', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASS')]) {
                    git url: "${GIT_REPO}", branch: 'main', credentialsId: 'github-cred-id'
                    sh 'echo "Excessive Logging: Full directory listing:"'
                    sh 'ls -la || dir'
                }
            }
        }
        stage('Build Docker Image') {
            steps {
                sh 'docker build --build-arg TARGET=app -t ${ECR_REGISTRY}/${ECR_REPO}:${IMAGE_TAG} .'
            }
        }
        stage('Push to ECR') {
            steps {
                withAWS(credentials: 'aws-cred-id', region: "${AWS_REGION}") {
                    script {
                        // Authenticate with ECR
                        sh 'aws ecr get-login-password --region ${AWS_REGION} | docker login --username AWS --password-stdin ${ECR_REGISTRY}'
                        // Push the image to ECR
                        sh 'docker push ${ECR_REGISTRY}/${ECR_REPO}:${IMAGE_TAG}'
                        
                        // Define and register the ECS task definition
                        def taskDef = """
                        {
                            "family": "app-task",
                            "networkMode": "bridge",
                            "containerDefinitions": [{
                                "name": "hello-world",
                                "image": "${ECR_REGISTRY}/${ECR_REPO}:${IMAGE_TAG}",
                                "cpu": 512,
                                "memory": 512,
                                "portMappings": [{"containerPort": 8080, "hostPort": 0, "protocol": "tcp"}],
                                "logConfiguration": {
                                    "logDriver": "awslogs",
                                    "options": {
                                        "awslogs-group": "/ecs/app-task",
                                        "awslogs-region": "eu-central-1",
                                        "awslogs-stream-prefix": "ecs"
                                    }
                                }
                            }]
                        }
                        """
                        writeFile file: 'task.json', text: taskDef
                        def taskDefArn = sh(script: 'aws ecs register-task-definition --cli-input-json file://task.json --query "taskDefinition.taskDefinitionArn" --output text', returnStdout: true).trim()
                        env.TASK_DEF_ARN = taskDefArn
                    }
                }
            }
        }
        stage('Deploy to ECS') {
            steps {
                withAWS(credentials: 'aws-cred-id', region: "${AWS_REGION}") {
                    sh 'aws ecs update-service --cluster $ECS_CLUSTER --service $ECS_SERVICE --task-definition $TASK_DEF_ARN --region $AWS_REGION'
                }
            }
        }
    }
    post {
        always {
            withAWS(credentials: 'aws-cred-id', region: "${AWS_REGION}") {
                sh 'echo "Excessive Logging: Full environment dump:"'
                sh 'env'
                script {
                    def status = currentBuild.currentResult
                    sh "aws sns publish --topic-arn ${SNS_TOPIC} --message 'Pipeline ${status} - Build #${BUILD_NUMBER}'"
                }
            }
        }
    }
}
